# Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.


# Where to find user code.

LIB_DIR = ./../../../library
USER_DIR = ./../../pub
SO_DIR = ./../../bin/plugins

THIRD_PATH = $(LIB_DIR)/public

CUSTOM_THIRD_PATH = $(LIB_DIR)/third_party

LINK_PATHS = -L./ -L/usr/local/libmemcached-1.0.7/lib/  -L/usr/lib64/mysql -L$(CUSTOM_THIRD_PATH)/librdkafka

# Flags passed to the preprocessor.
CPPFLAGS += -isystem -shared -fPIC -D_DB_POOL_ -D_DEBUG -DUSR_LOG_MSG\
	-D_DIC_POOL_ -D_REENTRANT -D_GNU_SOURCE -DUSR_LOG_ERROR -DUSR_LOG_MSG\
	-DNET_WORK -DHEAD_SHORT

# Flags passed to the C++ compiler.
CXXFLAGS += -g  -Wextra -pthread -shared -fPIC

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
PLUGIN = $(SO_DIR)/crawler_task/crawler_task.so
                
INCLUDE_PATHS = -I/usr/local/libmemcached-1.0.7/include \
				-I$(LIB_DIR) \
				-I$(THIRD_PATH)\
				-I/usr/local/include\
				-I/usr/include/mysql\
				-I$(USER_DIR)\
				-I$(CUSTOM_THIRD_PATH)/hiredis\
				-I$(CUSTOM_THIRD_PATH)\
				-I$(CUSTOM_THIRD_PATH)/librdkafka/src\
				-I$(LIB_DIR)/base\
				-I../\
				


# House-keeping build targets.

ALL_HEADERS = $(USER_HEADERS)
all : $(PLUGIN)

clean :
	rm -f $(PLUGIN)  *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
#GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
#gtest-all.o : $(GTEST_SRCS_)
#	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

#gtest_main.o : $(GTEST_SRCS_)
#	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

#gtest.a : gtest-all.o
#	$(AR) $(ARFLAGS) $@ $^

#gtest_main.a : gtest-all.o gtest_main.o
#	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.


crawler_task_init.o : ./crawler_task_init.cc ./crawler_task_init.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./crawler_task_init.cc $(INCLUDE_PATHS)

crawler_task_logic.o : ./crawler_task_logic.cc ./crawler_task_logic.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./crawler_task_logic.cc $(INCLUDE_PATHS)

crawler_task_db.o : ./crawler_task_db.cc ./crawler_task_db.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./crawler_task_db.cc $(INCLUDE_PATHS)
	
crawler_task_kafka.o : ./crawler_task_kafka.cc ./crawler_task_kafka.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./crawler_task_kafka.cc $(INCLUDE_PATHS)

task_schduler_engine.o : ./task_schduler_engine.cc ./task_schduler_engine.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./task_schduler_engine.cc $(INCLUDE_PATHS)

task_time_manager.o : ./task_time_manager.cc ./task_time_manager.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./task_time_manager.cc $(INCLUDE_PATHS)

mem_controller.o :  $(USER_DIR)/storage/mem_controller.cc $(USER_DIR)/storage/mem_controller.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/storage/mem_controller.cc $(INCLUDE_PATHS)

mysql_controller.o :  $(USER_DIR)/storage/mysql_controller.cc $(USER_DIR)/storage/mysql_controller.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/storage/mysql_controller.cc $(INCLUDE_PATHS)
	
redis_controller.o :  $(USER_DIR)/storage/redis_controller.cc $(USER_DIR)/storage/redis_controller.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/storage/redis_controller.cc $(INCLUDE_PATHS)
	
storage_controller_engine.o :  $(USER_DIR)/storage/storage_controller_engine.cc $(USER_DIR)/storage/storage_controller_engine.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/storage/storage_controller_engine.cc $(INCLUDE_PATHS)
	
auto_crawler_infos.o :  $(USER_DIR)/logic/auto_crawler_infos.cc $(USER_DIR)/logic/auto_crawler_infos.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/logic/auto_crawler_infos.cc $(INCLUDE_PATHS)
	
packet_processing.o :  $(USER_DIR)/net/packet_processing.cc $(USER_DIR)/net/packet_processing.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/net/packet_processing.cc $(INCLUDE_PATHS)
	
logic_unit.o :  $(USER_DIR)/logic/logic_unit.cc $(USER_DIR)/logic/logic_unit.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/logic/logic_unit.cc $(INCLUDE_PATHS)
		
mig_log.o: $(THIRD_PATH)/log/mig_log.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(THIRD_PATH)/log/mig_log.cc $(INCLUDE_PATHS)

basictypes.o: $(THIRD_PATH)/basic/basictypes.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(THIRD_PATH)/basic/basictypes.cc $(INCLUDE_PATHS)
		
native_library.o: $(THIRD_PATH)/basic/native_library.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(THIRD_PATH)/basic/native_library.cc $(INCLUDE_PATHS)
	
basic_util.o: $(THIRD_PATH)/basic/basic_util.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(THIRD_PATH)/basic/basic_util.cc $(INCLUDE_PATHS)
	
config.o: $(THIRD_PATH)/config/config.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(THIRD_PATH)/config/config.cc $(INCLUDE_PATHS)
	
md5sum.o:$(THIRD_PATH)/basic/md5sum.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(THIRD_PATH)/basic/md5sum.cc $(INCLUDE_PATHS)

radom_in.o:$(THIRD_PATH)/basic/radom_in.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(THIRD_PATH)/basic/radom_in.cc $(INCLUDE_PATHS)

data_packet.o:$(THIRD_PATH)/protocol/data_packet.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(THIRD_PATH)/protocol/data_packet.cc $(INCLUDE_PATHS)
	
tea.o:$(THIRD_PATH)/algorithm/tea.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(THIRD_PATH)/algorithm/tea.cc $(INCLUDE_PATHS)
	
unzip.o:$(LIB_DIR)/public/basic/unzip.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(LIB_DIR)/public/basic/unzip.cc $(INCLUDE_PATHS)
	
zip.o:$(LIB_DIR)/public/basic/zip.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(LIB_DIR)/public/basic/zip.cc $(INCLUDE_PATHS)
	

$(PLUGIN) : crawler_task_init.o  crawler_task_logic.o crawler_task_db.o crawler_task_kafka.o task_schduler_engine.o task_time_manager.o\
	packet_processing.o logic_unit.o auto_crawler_infos.o mem_controller.o mysql_controller.o\
	redis_controller.o storage_controller_engine.o\
	mig_log.o basictypes.o basic_util.o config.o md5sum.o radom_in.o data_packet.o native_library.o tea.o unzip.o zip.o\
	$(CUSTOM_THIRD_PATH)/dmg_fp/lib/dmg_fp.a $(LIB_DIR)/base/lib/mybase.a $(LIB_DIR)/lib/libhiredis.a $(CUSTOM_THIRD_PATH)/librdkafka/librdkafka.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LINK_PATHS) -lpthread -lexpat -lrt -lpthread -ldl -liconv -lmysqlclient -lcurl -lmemcached -lmemcachedutil  \
	$^ -o $@
